val c = 1
val f = x:int => x+c
val c = 2
val t = {val x: int = f(c); f(x)}

var d = 1
val g = x:int => {d=d+x; d}
val k = g(2)
d = 5
val l = g(3)

while (d != 11) {d = d+1; print(d)}

val main = k+l

data nat {zero(unit) | succ(nat)}

val id: nat -> nat = x => match x {zero(u) => zero(u) | succ(n) => succ(n)}

class iterator {hasNext: bool, next: unit -> int}

var x = -1
val nats = new iterator {hasNext = true, next = u => {x = x+1; x}}
val copy: iterator -> iterator = i => new iterator {hasNext = i.hasNext, next = i.next}

val nCopy = copy(nats)
print(nCopy.hasNext)
while (nCopy.hasNext && (x <= 100)) print(nCopy.next(()))